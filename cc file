/*
 * node_ProtocolPros.cc
 *
 *  Created on: Sep 25, 2024
 *      Author: Taslim Alam
 */
#include <omnetpp.h>

using namespace omnetpp;

class node_lab3: public cSimpleModule
{
private:
    int counter;
    bool sendMsgOnInit;
    int src;
    int dst;
  protected:
    virtual void initialize ()override;
    virtual void handleMessage(cMessage *msg) override;
    virtual void forwardMessage(cMessage *msg);
};


Define_Module(node_lab3);

void node_lab3::initialize()
{

    counter = par("limit");
    src=par("source");
    dst=par("destination");
    if (getIndex() == src && par("sendMsgOnInit").boolValue() == true) {
            // Boot the process scheduling the initial message as a self-message.
            char msgname[20];
            sprintf(msgname, "ProtocolPros", getIndex());
            cMessage *msg = new cMessage(msgname);
            scheduleAt(0.0, msg);
        }


}

void node_lab3::handleMessage(cMessage *msg)
{
    counter--;
    if (counter == 0) {
        EV << getName() << "'s counter reached zero, deleting message\n";
        delete msg;
    }
    else if(getIndex()==dst) {
        EV << "Message " << msg << " arrived.\n";
        delete msg;
    }
    else{
        forwardMessage(msg);
    }
}
void node_lab3::forwardMessage(cMessage *msg){
    int n = gateSize("gate");
       int k = intuniform(0, n-1);

       EV << "Forwarding message " << msg << " on gate[" << k << "]\n";
       // $o and $i suffix is used to identify the input/output part of a two way gate
       send(msg, "gate$o", k);
}
